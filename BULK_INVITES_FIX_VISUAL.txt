╔══════════════════════════════════════════════════════════════════════════════╗
║                    BULK INVITES DATA FLOW - FIXED                            ║
╚══════════════════════════════════════════════════════════════════════════════╝

┌─────────────────────────────────────────────────────────────────────────────┐
│ BEFORE THE FIX (Broken Data Flow)                                           │
└─────────────────────────────────────────────────────────────────────────────┘

[Add Recipients] 
    │
    ├─> Insert into bulk_invites ✓
    │   ├─ status: 'queued'
    │   ├─ next_email_scheduled: NULL ❌ (can't be picked up by sender)
    │   └─ total_recipients: 0 ❌ (never updated)
    │
    └─> UI still shows 0 recipients ❌
         └─> "Start Campaign" button hidden ❌

[Send Emails]
    │
    ├─> Query bulk_invites WHERE next_email_scheduled <= NOW()
    │   └─> Returns 0 rows ❌ (next_email_scheduled is NULL)
    │
    └─> Updates campaign.sent_count ✓
         └─> But UI reads total_sent ❌ (stays 0)

[Campaign Details Page]
    │
    └─> SELECT * FROM bulk_invite_recipients ❌ (wrong table!)
         └─> Shows no data ❌


┌─────────────────────────────────────────────────────────────────────────────┐
│ AFTER THE FIX (Working Data Flow)                                           │
└─────────────────────────────────────────────────────────────────────────────┘

[Add Recipients]
    │
    ├─> Insert into bulk_invites ✓
    │   ├─ status: 'queued'
    │   ├─ next_email_scheduled: NOW() ✅ (immediately schedulable)
    │   └─ code: generated
    │
    ├─> Update campaign.total_recipients += count ✅
    │
    └─> UI shows correct count ✅
         └─> "Start Campaign" button appears ✅

[Start Campaign]
    │
    ├─> POST /api/bulk-invites/campaigns/start
    │   ├─ Verify admin bearer token ✅
    │   └─ Update campaign.status = 'active' ✅
    │
    └─> POST /api/bulk-invites/track/send (optional)
         └─> Triggers first batch ✅

[Send Emails]
    │
    ├─> Query bulk_invites WHERE next_email_scheduled <= NOW() ✅
    │   └─> Returns queued recipients ✅
    │
    ├─> Send via SendGrid ✅
    │
    └─> Updates:
         ├─ campaign.sent_count += sent ✅
         ├─ campaign.total_sent += sent ✅ (UI reads this!)
         └─ recipient.next_email_scheduled = next_send_date ✅

[Campaign Details Page]
    │
    ├─> SELECT * FROM bulk_invites ✅ (correct table)
    │
    ├─> Map fields:
    │   ├─ full_name → first_name, last_name ✅
    │   ├─ code → invite_code ✅
    │   └─ sent_at → last_email_sent ✅
    │
    └─> Display recipients correctly ✅


╔══════════════════════════════════════════════════════════════════════════════╗
║                           FIELD MAPPING                                       ║
╚══════════════════════════════════════════════════════════════════════════════╝

Database (bulk_invites)     UI / Email Sender           Mapping
━━━━━━━━━━━━━━━━━━━━━━━    ━━━━━━━━━━━━━━━━━━━━━    ━━━━━━━━━━━━━━━━━
full_name                   first_name                Split on space
                           last_name                 (remainder)

code                       invite_code               Direct mapping

sent_at                    last_email_sent           Fallback field

sequence_stage             sequence_stage            Direct (default 0)


╔══════════════════════════════════════════════════════════════════════════════╗
║                        ACCEPTANCE CRITERIA                                    ║
╚══════════════════════════════════════════════════════════════════════════════╝

✅ After adding recipient, campaign card shows Recipients > 0
✅ "Start Campaign" button shows for draft campaign with recipients
✅ Start Campaign activates campaign (draft → active)
✅ Manual trigger finds recipients (next_email_scheduled initialized)
✅ Sender increments UI-visible total_sent counter
✅ Campaign details page shows recipients from bulk_invites table
✅ All operations idempotent and null-safe
✅ Admin authentication enforced on activation endpoint
✅ CodeQL security scan passed (0 alerts)


╔══════════════════════════════════════════════════════════════════════════════╗
║                         FILES CHANGED (7)                                     ║
╚══════════════════════════════════════════════════════════════════════════════╝

1. app/api/bulk-invites/track/upload/route.js
   ├─ Initialize next_email_scheduled = NOW()
   └─ Update total_recipients immediately

2. app/api/bulk-invites/track/send/route.js
   ├─ Update total_sent field (UI reads this)
   └─ Handle both field name conventions

3. app/admin/bulk-invites/[id]/page.js
   ├─ Read from bulk_invites (not bulk_invite_recipients)
   └─ Map fields transparently

4. app/admin/bulk-invites/page.js
   └─ Wire Start Campaign button to activation API

5. app/api/bulk-invites/campaigns/start/route.js (NEW)
   ├─ Admin authentication required
   ├─ Verify Bearer token
   └─ Activate campaign (draft → active)

6. supabase/migrations/backfill_bulk_invites_data_flow.sql (NEW)
   ├─ Reconcile total_recipients from actual counts
   ├─ Initialize next_email_scheduled for existing queued rows
   └─ Sync all campaign stats (total_sent, total_opened, etc.)

7. Documentation files (NEW)
   ├─ BULK_INVITES_FIX_SUMMARY.md
   └─ BULK_INVITES_FIX_QUICKREF.md


╔══════════════════════════════════════════════════════════════════════════════╗
║                      DEPLOYMENT CHECKLIST                                     ║
╚══════════════════════════════════════════════════════════════════════════════╝

□ 1. Review and merge PR
□ 2. Deploy code (automatic via Vercel)
□ 3. Run backfill SQL script in Supabase
□ 4. Test: Create campaign
□ 5. Test: Add recipients → verify count updates
□ 6. Test: Start campaign → verify status changes
□ 7. Test: Send emails → verify total_sent increments
□ 8. Test: Details page → verify recipients display
□ 9. Monitor logs for errors
□ 10. Monitor email delivery

