# 🚀 MASTER IMPLEMENTATION PROMPT - CIRCLE NETWORK

Execute this in order. This will implement the complete maximum-profit strategy.

═══════════════════════════════════════════════════════════════

## PHASE 1: ADMIN PANEL ENHANCEMENTS (30 min)

Add these missing features to admin panel:

### 1. Stripe Subscription Management
**File:** Create `app/admin/subscriptions/page.js`

Features:
- View all active subscriptions
- See payment history per member  
- Cancel/refund subscriptions
- Handle failed payments (dunning)
- Upgrade/downgrade members
- Export subscription data

Use Stripe API to:
```javascript
const subscriptions = await stripe.subscriptions.list();
const subscription = await stripe.subscriptions.cancel(subscriptionId);
const refund = await stripe.refunds.create({ charge: chargeId });
```

### 2. Activity Logs / Audit Trail
**File:** Create `app/admin/activity/page.js`

Track:
- Who approved/rejected applications
- Who sent invites
- Who modified member status
- When subscriptions were cancelled
- All admin actions with timestamps

Create table:
```sql
CREATE TABLE admin_activity_log (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  admin_id UUID REFERENCES profiles(id),
  action TEXT NOT NULL,
  target_type TEXT,
  target_id UUID,
  metadata JSONB,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### 3. Bulk Actions in Members Page
**File:** `app/admin/members/page.js` (enhance existing)

Add:
- Select multiple members (checkboxes)
- Bulk actions: Export, Deactivate, Send email
- Export all member data as CSV
- Filter by join date, subscription type

### 4. Support Tickets System
**File:** Create `app/admin/support/page.js`

Create table:
```sql
CREATE TABLE support_tickets (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  member_id UUID REFERENCES profiles(id),
  subject TEXT NOT NULL,
  message TEXT NOT NULL,
  status TEXT DEFAULT 'open',
  priority TEXT DEFAULT 'normal',
  assigned_to UUID REFERENCES profiles(id),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

Features:
- Members can submit tickets from dashboard
- Admin can view, reply, close tickets
- Email notifications on ticket updates

### 5. Make Admin Check Database-Driven
**File:** `app/admin/page.js` (fix existing)

Currently checks hard-coded email list. Change to:
```javascript
// Add is_admin column to profiles table
ALTER TABLE profiles ADD COLUMN is_admin BOOLEAN DEFAULT false;

// Then in code:
const { data: profile } = await supabase
  .from('profiles')
  .select('is_admin')
  .eq('id', session.user.id)
  .single();

if (!profile?.is_admin) {
  router.push('/dashboard');
  return;
}
```

Update your admin email to is_admin = true in database.

═══════════════════════════════════════════════════════════════

## PHASE 2: SENDGRID EMAIL TEMPLATES (1 hour)

### Create 5 Email Variants × 4 Sequences = 20 Total Templates

Use SendGrid Dynamic Templates API:

**File:** Create `lib/sendgrid-templates.js`

```javascript
import sgMail from '@sendgrid/mail';

sgMail.setApiKey(process.env.SENDGRID_API_KEY);

export const EMAIL_TEMPLATES = {
  FOUNDER_INVITE_1: 'd-xxxxx', // Get from SendGrid
  FOUNDER_INVITE_2: 'd-xxxxx',
  FOUNDER_INVITE_3: 'd-xxxxx',
  FOUNDER_INVITE_4: 'd-xxxxx',
  OPERATOR_INVITE_1: 'd-xxxxx',
  // ... etc for all 20 templates
};

export async function sendPersonalizedInvite({
  to,
  firstName,
  lastName,
  inviteCode,
  persona, // 'founder' | 'operator' | 'investor' | 'executive' | 'wildcard'
  sequenceNumber // 1-4
}) {
  const templateId = EMAIL_TEMPLATES[`${persona.toUpperCase()}_INVITE_${sequenceNumber}`];
  
  const msg = {
    to,
    from: {
      email: 'invite@thecirclenetwork.org',
      name: 'Shehab from The Circle Network'
    },
    templateId,
    dynamicTemplateData: {
      first_name: firstName,
      last_name: lastName,
      invite_code: inviteCode,
      invite_link: `https://thecirclenetwork.org?email=${encodeURIComponent(to)}&code=${inviteCode}`,
      spots_remaining: await getSpotsRemaining(),
      expiry_date: getExpiryDate(14), // 14 days from now
    }
  };

  await sgMail.send(msg);
}

async function getSpotsRemaining() {
  const { count } = await supabase
    .from('profiles')
    .select('*', { count: 'exact', head: true })
    .eq('is_founding_member', true);
  
  return 500 - (count || 0);
}

function getExpiryDate(daysFromNow) {
  const date = new Date();
  date.setDate(date.getDate() + daysFromNow);
  return date.toLocaleDateString('en-US', { month: 'long', day: 'numeric' });
}
```

### In SendGrid Dashboard:
1. Create each template with dynamic variables: {{first_name}}, {{invite_code}}, {{spots_remaining}}
2. Copy template IDs and paste into EMAIL_TEMPLATES object
3. Use the exact copy from the "Ultimate Invite Strategy" artifact

### Update Bulk Invite System
**File:** `app/api/bulk-invites/send/route.js`

Add persona selection:
```javascript
export async function POST(request) {
  const { campaignId, persona } = await request.json();
  
  // Get recipients for this campaign
  const { data: recipients } = await supabase
    .from('bulk_invite_recipients')
    .select('*')
    .eq('campaign_id', campaignId)
    .eq('sequence_stage', 0) // First email only
    .limit(100); // Daily limit

  for (const recipient of recipients) {
    await sendPersonalizedInvite({
      to: recipient.email,
      firstName: recipient.first_name,
      lastName: recipient.last_name,
      inviteCode: recipient.invite_code,
      persona: persona || 'wildcard',
      sequenceNumber: 1
    });

    // Update status
    await supabase
      .from('bulk_invite_recipients')
      .update({
        status: 'sent',
        sequence_stage: 1,
        last_email_sent: new Date().toISOString(),
        next_email_scheduled: getNextEmailDate(3) // Day 3
      })
      .eq('id', recipient.id);
  }
}
```

### Create Automated Sequence Handler
**File:** Create `app/api/cron/email-sequences/route.js`

Vercel Cron job that runs daily:
```javascript
export async function GET() {
  // Find recipients due for next email
  const { data: recipients } = await supabase
    .from('bulk_invite_recipients')
    .select('*')
    .lte('next_email_scheduled', new Date().toISOString())
    .lt('sequence_stage', 4)
    .neq('status', 'converted')
    .limit(100);

  for (const recipient of recipients) {
    const nextStage = recipient.sequence_stage + 1;
    
    await sendPersonalizedInvite({
      to: recipient.email,
      firstName: recipient.first_name,
      lastName: recipient.last_name,
      inviteCode: recipient.invite_code,
      persona: recipient.persona || 'wildcard',
      sequenceNumber: nextStage
    });

    await supabase
      .from('bulk_invite_recipients')
      .update({
        sequence_stage: nextStage,
        last_email_sent: new Date().toISOString(),
        next_email_scheduled: nextStage < 4 
          ? getNextEmailDate(getNextEmailDelay(nextStage))
          : null
      })
      .eq('id', recipient.id);
  }

  return Response.json({ processed: recipients.length });
}

function getNextEmailDelay(stage) {
  const delays = { 1: 3, 2: 4, 3: 7 }; // Days 3, 7, 14
  return delays[stage];
}
```

Add to `vercel.json`:
```json
{
  "crons": [{
    "path": "/api/cron/email-sequences",
    "schedule": "0 9 * * *"
  }]
}
```

═══════════════════════════════════════════════════════════════

## PHASE 3: ONBOARDING CAROUSEL (30 min)

### 1. Create Component
**File:** Create `components/OnboardingCarousel.jsx`

Use the exact code from the "Onboarding Carousel Component" artifact I just created.

### 2. Integrate into Dashboard
**File:** `app/dashboard/page.js`

Add at the top of the component:
```javascript
import OnboardingCarousel from '@/components/OnboardingCarousel';

export default function DashboardPage() {
  const [showOnboarding, setShowOnboarding] = useState(false);
  
  useEffect(() => {
    // Check if first login
    const hasSeenOnboarding = localStorage.getItem('onboarding_completed');
    if (!hasSeenOnboarding && user) {
      setShowOnboarding(true);
    }
  }, [user]);

  return (
    <div>
      {showOnboarding && (
        <OnboardingCarousel
          userName={user?.full_name?.split(' ')[0] || 'there'}
          onComplete={() => setShowOnboarding(false)}
        />
      )}
      
      {/* Rest of dashboard */}
    </div>
  );
}
```

### 3. Add "Replay Onboarding" to Settings
**File:** `app/settings/page.js`

Add button:
```javascript
<button
  onClick={() => {
    localStorage.removeItem('onboarding_completed');
    window.location.reload();
  }}
  className="px-4 py-2 bg-zinc-800 hover:bg-zinc-700 text-white rounded-lg"
>
  Replay Onboarding Tour
</button>
```

═══════════════════════════════════════════════════════════════

## PHASE 4: MAXIMUM PROFIT FEATURES (2 hours)

### 1. Annual Pricing Option
**File:** `app/subscribe/page.js`

Add pricing toggle:
```javascript
const [billingCycle, setBillingCycle] = useState('monthly');

const pricing = {
  monthly: { amount: 199, label: '$199/month' },
  annual: { amount: 1999, label: '$1,999/year', savings: '$390/year saved' }
};

// In render:
<div className="flex items-center justify-center gap-4 mb-8">
  <button
    onClick={() => setBillingCycle('monthly')}
    className={billingCycle === 'monthly' ? 'active-class' : 'inactive-class'}
  >
    Monthly
  </button>
  <button
    onClick={() => setBillingCycle('annual')}
    className={billingCycle === 'annual' ? 'active-class' : 'inactive-class'}
  >
    Annual (Save $390)
  </button>
</div>
```

Create annual price in Stripe, update checkout to use correct price ID.

### 2. VIP "Founding Partner" Tier
**File:** Create `app/subscribe/vip/page.js`

Features:
- $499/mo pricing
- Limited to 50 members
- 10 invite codes (vs 5)
- Priority intro service
- Quarterly 1:1 call
- VIP badge in directory

Add to profiles table:
```sql
ALTER TABLE profiles ADD COLUMN is_vip BOOLEAN DEFAULT false;
ALTER TABLE profiles ADD COLUMN invite_credits_vip INTEGER DEFAULT 10;
```

### 3. Pre-filled Landing Page with Invite Code
**File:** `app/page.js`

Update to read URL params:
```javascript
const searchParams = useSearchParams();
const prefilledEmail = searchParams.get('email');
const prefilledCode = searchParams.get('code');

useEffect(() => {
  if (prefilledEmail) setEmail(prefilledEmail);
  if (prefilledCode) setInviteCode(prefilledCode);
}, [prefilledEmail, prefilledCode]);
```

Show personalized message if invite code is valid:
```javascript
{prefilledCode && (
  <div className="mb-6 p-4 bg-emerald-500/10 border border-emerald-500/30 rounded-lg">
    <p className="text-emerald-400">
      ✓ You've been personally invited with code: <strong>{prefilledCode}</strong>
    </p>
  </div>
)}
```

### 4. Real-Time Spot Counter
**File:** `app/page.js`

Add live counter:
```javascript
const [spotsRemaining, setSpotsRemaining] = useState(null);

useEffect(() => {
  const loadSpots = async () => {
    const { count } = await supabase
      .from('profiles')
      .select('*', { count: 'exact', head: true })
      .eq('is_founding_member', true);
    
    setSpotsRemaining(500 - (count || 0));
  };

  loadSpots();
  
  // Update every 30 seconds
  const interval = setInterval(loadSpots, 30000);
  return () => clearInterval(interval);
}, []);

// In render:
<div className="text-amber-400 font-bold">
  {spotsRemaining !== null ? (
    `${spotsRemaining}/500 Founding Member spots remaining`
  ) : (
    'Loading...'
  )}
</div>
```

### 5. Referral System
**File:** Create `app/dashboard/referrals/page.js`

Features:
- Each member gets 5 invite codes (10 for VIP)
- Track who was invited by whom
- Show referral stats
- Give 1 month free for every 3 successful referrals

Create table:
```sql
CREATE TABLE referrals (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  referrer_id UUID REFERENCES profiles(id),
  referred_email TEXT NOT NULL,
  invite_code TEXT UNIQUE NOT NULL,
  status TEXT DEFAULT 'pending',
  converted_at TIMESTAMPTZ,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

Generate invite codes for members:
```javascript
async function generateReferralCodes(userId, count = 5) {
  const codes = [];
  for (let i = 0; i < count; i++) {
    const code = generateUniqueCode();
    codes.push({ referrer_id: userId, invite_code: code });
  }
  
  await supabase.from('referrals').insert(codes);
  return codes;
}
```

### 6. Abandoned Cart Emails
**File:** Create `app/api/cron/abandoned-carts/route.js`

Track users who:
- Submitted application but didn't pay
- Clicked invite link but didn't apply

Create table:
```sql
CREATE TABLE abandoned_carts (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  email TEXT NOT NULL,
  stage TEXT, -- 'invite_viewed', 'application_started', 'checkout_started'
  metadata JSONB,
  reminder_sent BOOLEAN DEFAULT false,
  created_at TIMESTAMPTZ DEFAULT NOW()
);
```

Send reminder after 24 hours:
```javascript
export async function GET() {
  const yesterday = new Date(Date.now() - 24 * 60 * 60 * 1000);
  
  const { data: abandoned } = await supabase
    .from('abandoned_carts')
    .select('*')
    .lt('created_at', yesterday.toISOString())
    .eq('reminder_sent', false);

  for (const cart of abandoned) {
    await sendAbandonedCartEmail(cart.email, cart.stage);
    await supabase
      .from('abandoned_carts')
      .update({ reminder_sent: true })
      .eq('id', cart.id);
  }
}
```

═══════════════════════════════════════════════════════════════

## PHASE 5: ANALYTICS & TRACKING (30 min)

### 1. Track Email Opens/Clicks
**File:** Update `lib/sendgrid-templates.js`

SendGrid automatically tracks opens/clicks. Use webhooks to update your database:

**File:** Create `app/api/webhooks/sendgrid/route.js`

```javascript
export async function POST(request) {
  const events = await request.json();

  for (const event of events) {
    if (event.event === 'open') {
      await supabase
        .from('bulk_invite_recipients')
        .update({ 
          status: 'opened',
          opened_at: new Date().toISOString()
        })
        .eq('email', event.email)
        .is('opened_at', null); // Only first open
    }

    if (event.event === 'click') {
      await supabase
        .from('bulk_invite_recipients')
        .update({ 
          status: 'clicked',
          clicked_at: new Date().toISOString()
        })
        .eq('email', event.email);
    }
  }

  return Response.json({ received: true });
}
```

Configure in SendGrid: Settings → Mail Settings → Event Webhooks

### 2. Conversion Attribution
**File:** `app/api/stripe/webhook/route.js`

When payment succeeds, mark as converted:
```javascript
if (event.type === 'checkout.session.completed') {
  const session = event.data.object;
  const email = session.customer_details.email;

  // Mark in bulk invites
  await supabase
    .from('bulk_invite_recipients')
    .update({ 
      status: 'converted',
      converted_at: new Date().toISOString()
    })
    .eq('email', email);

  // Mark in referrals
  await supabase
    .from('referrals')
    .update({ 
      status: 'converted',
      converted_at: new Date().toISOString()
    })
    .eq('referred_email', email);
}
```

### 3. A/B Testing Dashboard
**File:** Create `app/admin/ab-testing/page.js`

Show conversion rates by:
- Email template variant
- Subject line
- Persona
- Send time

Query:
```javascript
const { data: stats } = await supabase
  .from('bulk_invite_campaigns')
  .select(`
    id,
    name,
    total_sent,
    total_converted,
    recipients:bulk_invite_recipients(
      persona,
      status
    )
  `);

// Calculate conversion by persona
const byPersona = stats.reduce((acc, campaign) => {
  // Group by persona and calculate conversion rate
  return acc;
}, {});
```

═══════════════════════════════════════════════════════════════

## PHASE 6: TESTING & QA (Per existing plan)

After all features are built:

1. Run Playwright tests from earlier prompt
2. Test email sequences end-to-end
3. Test payment flows (monthly & annual)
4. Test referral system
5. Test admin functions
6. Test onboarding on fresh account

═══════════════════════════════════════════════════════════════

## EXECUTION CHECKLIST

Work through each phase in order:

### Phase 1: Admin Enhancements
- [ ] Subscription management page
- [ ] Activity logs
- [ ] Bulk actions in members page
- [ ] Support tickets system
- [ ] Database-driven admin check

### Phase 2: Email Templates
- [ ] Create 20 SendGrid templates (5 personas × 4 emails)
- [ ] Update sendgrid-templates.js
- [ ] Update bulk invite send API
- [ ] Create cron job for sequence automation
- [ ] Configure webhooks

### Phase 3: Onboarding
- [ ] Create OnboardingCarousel component
- [ ] Integrate into dashboard
- [ ] Add replay button to settings

### Phase 4: Profit Features
- [ ] Annual pricing toggle
- [ ] VIP tier ($499/mo)
- [ ] Pre-filled landing page
- [ ] Real-time spot counter
- [ ] Referral system
- [ ] Abandoned cart emails

### Phase 5: Analytics
- [ ] Email open/click tracking
- [ ] Conversion attribution
- [ ] A/B testing dashboard

### Phase 6: Testing
- [ ] Run all Playwright tests
- [ ] Manual QA of new features
- [ ] Test email sequences
- [ ] Test payment flows

═══════════════════════════════════════════════════════════════

## PRIORITY ORDER

If time is limited, do in this order:

1. **Email templates (Phase 2)** - This drives revenue
2. **Real-time spot counter (Phase 4.4)** - Increases urgency
3. **Onboarding carousel (Phase 3)** - Improves retention
4. **Annual pricing (Phase 4.1)** - Immediate cash flow boost
5. **Admin enhancements (Phase 1)** - Makes your life easier
6. **Analytics (Phase 5)** - Helps you optimize

═══════════════════════════════════════════════════════════════

## ESTIMATED TIME

- Phase 1: 30 minutes
- Phase 2: 1 hour
- Phase 3: 30 minutes
- Phase 4: 2 hours
- Phase 5: 30 minutes
- Phase 6: 1 hour

**Total: ~5.5 hours of agent work**

═══════════════════════════════════════════════════════════════

Start with Phase 1 and work through systematically. Report progress after each phase.

Good luck! 🚀