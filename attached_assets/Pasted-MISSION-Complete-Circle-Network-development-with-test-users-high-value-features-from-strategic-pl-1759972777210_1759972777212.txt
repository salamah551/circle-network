MISSION: Complete Circle Network development with test users + high-value features from strategic plan

═══════════════════════════════════════════════════════════════

PHASE 1: CREATE TEST MEMBER ACCOUNTS (Do First)
═══════════════════════════════════════════════════════════════

Create 5 complete test member accounts in Supabase:

Test Member 1: Sarah Chen
- Email: sarah.chen@test.com
- Full Name: Sarah Chen
- Title: VP of Engineering
- Company: TechCorp
- Location: San Francisco, CA
- Bio: Building scalable systems and leading high-performing teams. Former engineer at Google and Stripe.
- Expertise: ["Engineering Leadership", "System Architecture", "Team Building", "Hiring"]
- Needs: ["Fundraising Connections", "Sales Leadership Advice"]
- Subscription Status: active
- Is Founding Member: true

Test Member 2: Michael Rodriguez
- Email: michael.rodriguez@test.com
- Full Name: Michael Rodriguez
- Title: Founder & CEO
- Company: GrowthLabs
- Location: Austin, TX
- Bio: Serial entrepreneur with 2 exits. Helping startups find product-market fit.
- Expertise: ["Product Strategy", "Fundraising", "Growth Marketing", "B2B SaaS"]
- Needs: ["Engineering Talent", "Technical Co-founder"]
- Subscription Status: active
- Is Founding Member: true

Test Member 3: Emily Watson
- Email: emily.watson@test.com
- Full Name: Emily Watson
- Title: Head of Product
- Company: DataFlow
- Location: New York, NY
- Bio: Product leader passionate about user experience and data-driven decision making.
- Expertise: ["Product Management", "UX Design", "Analytics", "User Research"]
- Needs: ["Enterprise Sales Expertise", "B2B Partnerships"]
- Subscription Status: active
- Is Founding Member: true

Test Member 4: James Kim
- Email: james.kim@test.com
- Full Name: James Kim
- Title: Partner
- Company: Vertex Ventures
- Location: Palo Alto, CA
- Bio: Venture capitalist investing in early-stage SaaS and AI companies.
- Expertise: ["Venture Capital", "SaaS", "Business Strategy", "Investor Relations"]
- Needs: ["Deal Flow", "Technical Diligence Help"]
- Subscription Status: active
- Is Founding Member: true

Test Member 5: Alexandra Patel
- Email: alexandra.patel@test.com
- Full Name: Alexandra Patel
- Title: CMO
- Company: BrandWorks
- Location: Los Angeles, CA
- Bio: Marketing executive specializing in brand building and demand generation.
- Expertise: ["Marketing Strategy", "Brand Building", "Content Marketing", "PR"]
- Needs: ["Technical Marketing Tools", "Marketing Automation"]
- Subscription Status: active
- Is Founding Member: true

For EACH test member:
1. Create auth user in Supabase (you may need to use Supabase API)
2. Insert profile record in profiles table
3. Verify data was inserted correctly

═══════════════════════════════════════════════════════════════

PHASE 2: HIGH-VALUE FEATURES (Priority Order)
═══════════════════════════════════════════════════════════════

FEATURE 1: REAL-TIME MEMBER COUNT & SCARCITY
File: app/page.js (landing page)

Add dynamic member count display:
- Query actual member count from profiles table
- Show: "487/500 founding spots remaining" (calculate from actual data)
- Update countdown timer to show real deadline
- Add: "23 people joined in last 48 hours" (query recent signups)

FEATURE 2: UNREAD MESSAGE BADGES
Files: app/messages/page.js, app/dashboard/page.js

- Add unread count to message conversations
- Show badge with number on dashboard: "Messages (3)"
- Mark messages as read when viewed
- Update is_read field in messages table

FEATURE 3: ACTIVE STATUS INDICATORS  
File: app/members/page.js

- Show "Active Now" badge for members online in last 5 minutes
- Add last_active_at timestamp to profiles
- Update timestamp on page views
- Green dot next to active members

FEATURE 4: SMART MEMBER RECOMMENDATIONS
File: Create app/recommendations/page.js or add to dashboard

- Algorithm: Match user's "needs" with other members' "expertise"
- Show "You Should Meet:" section on dashboard
- Display top 3 matches with reason: "Sarah has expertise in Fundraising"
- "Connect" button to start conversation

FEATURE 5: SUCCESS STORIES SECTION
File: Create app/success-stories/page.js

- Public page showing member wins
- Display: "[Member] closed $500K funding through Circle Network intro"
- Filter by category: Fundraising, Hiring, Partnerships
- "Share Your Story" button for members to submit

FEATURE 6: MEMBER ACTIVITY FEED
File: app/dashboard/page.js

Add activity feed showing:
- "Michael Rodriguez posted a new request: Looking for SaaS designer"
- "Emily Watson joined 2 days ago"
- "James Kim is attending Networking Mixer event"
- "3 new members this week"

FEATURE 7: ENHANCED EVENT FEATURES
File: app/events/page.js (update existing)

Add:
- Attendee avatars preview
- "Event Full" status when max capacity reached
- Host profile link
- Calendar export (.ics file download)

FEATURE 8: REQUEST BOARD IMPROVEMENTS
File: app/requests/page.js (update existing)

Add:
- Upvote system (members can upvote helpful requests)
- Sort by: Recent, Most Upvoted, Most Replies
- Categories with icons
- Reply count badge
- Mark as resolved with checkmark

FEATURE 9: PROFILE IMPROVEMENTS
File: app/settings/page.js or profile pages

Add:
- Profile completion percentage: "Your profile is 80% complete"
- "Add LinkedIn" prompt if missing
- Profile view counter
- "Similar members" based on expertise overlap

FEATURE 10: ANNUAL PRICING OPTION
File: app/subscribe/page.js

Add second pricing tier:
- Keep $199/mo (monthly)
- Add $1,999/year option (save $390 - 2 months free!)
- Toggle switch between monthly/annual
- Create second Stripe price in code

═══════════════════════════════════════════════════════════════

PHASE 3: CODE QUALITY & OPTIMIZATION
═══════════════════════════════════════════════════════════════

1. Add loading states to all buttons and forms
2. Add error boundaries to catch JavaScript errors
3. Add proper error messages for failed API calls
4. Optimize images with next/image component
5. Add meta tags for SEO on all pages
6. Ensure mobile responsive on all features
7. Add proper TypeScript types (if using TS) or JSDoc comments
8. Remove console.logs from production code

═══════════════════════════════════════════════════════════════

PHASE 4: PLAYWRIGHT TEST SUITE
═══════════════════════════════════════════════════════════════

File: Create tests/circle-network.spec.js

Install Playwright:
npm install -D @playwright/test

Create comprehensive tests:

TEST 1: Landing Page
- Page loads correctly
- Countdown timer displays
- Member count shows
- CTA buttons work

TEST 2: Invite Flow  
- Enter email + invite code
- Magic link flow (mock if needed)
- Application form submission
- Redirect to payment

TEST 3: Member Directory
- All 5 test members appear
- Search works
- Filters work
- Can view member profiles

TEST 4: Events
- Can create new event
- Event appears in list
- Can RSVP to event
- Attendee count updates

TEST 5: Public Chat
- Can post message
- Messages appear in real-time
- Can delete own messages

TEST 6: Requests Board
- Can create request
- Requests appear in list
- Can reply to request
- Reply count updates

TEST 7: Messages
- Can send direct message
- Can attach image (if implemented)
- Message appears in conversation
- Unread badge updates

TEST 8: Dashboard
- Stats load correctly
- Activity feed shows recent items
- Recommendations appear
- Quick actions work

TEST 9: Settings/Profile
- Can update profile
- Changes save correctly
- Profile completion updates

TEST 10: Mobile Responsiveness
- Test all pages on mobile viewport (375x667)
- Navigation works
- Forms are usable
- No horizontal scroll

Run tests with: npx playwright test

═══════════════════════════════════════════════════════════════

EXECUTION PLAN
═══════════════════════════════════════════════════════════════

Work in this order:
1. Phase 1: Create test members (30 min)
2. Phase 2: Build features 1-10 (2-3 hours)
3. Phase 3: Code cleanup (30 min)
4. Phase 4: Playwright tests (1 hour)

For each feature:
- Build it
- Test it locally
- Commit to git with descriptive message
- Move to next feature

IMPORTANT RULES:
- Don't break existing features
- Maintain consistent design/styling
- Use existing components when possible
- Add comments explaining complex logic
- Test as you go

After EVERYTHING is complete:
- Run Playwright tests
- Fix any failures
- Provide summary of all changes
- Ready to push to GitHub

Start with PHASE 1: Create the 5 test member accounts.